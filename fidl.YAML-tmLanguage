# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Franca IDL
scopeName: source.fidl
fileTypes: [fdl,fidl]
uuid: 7b6518cc-e0eb-4d96-bd61-5493816e0279

patterns:
- include: '#comments'
- include: '#lex'

repository:

  # comments:
    # patterns:
    # - name: invalid.illegal.stray-comment-end.fidl
    #   match: \*/.*\n
    # - name: comment.line.banner.fidl
    #   match: ^// =(\s*.*?)\s*=\s*$\n?
    #   captures:
    #     '1': {name: meta.toc-list.banner.line.fidl}
    # - name: comment.line.double-slash.fidl
    #   begin: //
    #   beginCaptures:
    #     '0': {name: punctuation.definition.comment.fidl}
    #   end: $\n?
    #   patterns:
    #   - match: (?>\\\s*\n)
    #     name: punctuation.separator.continuation.fidl

    #     # control sequences
  comments:
    patterns:
    - name: comment.block.fidl
      match: ^\s*/\* =(\s*.*?)\s*= \*/$\n?
      captures:
        '1': {name: meta.toc-list.banner.block.fidl}
    - name: comment.block.fidl
      begin: \s*<\*
      end: \*>
      captures:
        '0': {name: punctuation.definition.comment.fidl}
    - name: comment.block.fidl
      begin: \s*/\*
      end: \*/
      captures:
        '0': {name: punctuation.definition.comment.fidl}
    - name: invalid.illegal.stray-comment-end.fidl
      match: \*/(?=[^*].*\n)
    - name: comment.line.banner.fidl
      match: ^\s*// =(\s*.*?)\s*=\s*$\n?
      captures:
        '1': {name: meta.toc-list.banner.line.fidl}
    - name: comment.line.double-slash.fidl
      begin: \s*//
      beginCaptures:
        '0': {name: punctuation.definition.comment.fidl}
      end: (?<=^|[^\\])\s*(?=\n)$\n?
      patterns:
      - include: '#lex-continuation'

  lex:
    patterns:
    - include: '#lex-keyword'
    - include: '#lex-constant'
    - include: '#lex-string'
    - include: '#lex-function'

  lex-constant:
    patterns:
    - match: \b(NULL|true|false|TRUE|FALSE)\b
      captures:
        '1': {name: constant.language.fidl}
  
  lex-function:
    patterns:
    - match: \s*\b(method|broadcast)*\b \{*\b\}
    captures:
      "1": {name: entity.name.function.fidl }

  lex-keyword:
    patterns:
    - match: \s*\b(sizeof|(?:__|(?!\w+__))typeof(?:__)?)\b
      captures:
        '1': {name: keyword.operator.fidl}
    - match: \s*\b((?:__|(?!\w+__))asm(?:__)?|version|attribute|method|in|out|broadcast|selective|import|model|error|typedef|is)\b
      captures:
        '1': {name: keyword.control.fidl}
    - match: \s*\b(Int8|Int16|Int32|UInt8|UInt16|UInt32|UInt64|Int64|Boolean|String|major|Double|Float|minor|int|readonly|short|signed|unsigned|void)\b
      captures:
        '1': {name: storage.type.fidl}
    - match: \s*\b(extern|static|register|__attribute__|(?:__|(?!\w+__))(?:const|restrict|volatile|inline)(?:__)?)\b
      captures:
        '1': {name: storage.modifier.fidl}
    - match: \s*\b(interface|struct|union|enumeration|package|typeCollection)\b
      captures:
        '1': {name: storage.type.fidl}

  lex-number:
    patterns:
    - match: \s*(\b(0[xX][0-9a-fA-F]*|0[0-7]*|[1-9][0-9]*)[uU]?(ll?|LL?)?\b)
      captures:
        '1': {name: constant.numeric.integer.fidl}

  lex-continuation:
    name: punctuation.separator.continuation.fidl
    match: (\\)(?:$\n?|(\s+?)(?=\n)$)
    captures:
      '1': {name: keyword.other.line-continuation.fidl}
      '2': {name: invalid.deprecated.space-after-continuation.fidl}

  lex-string:
    patterns:
    - name: string.quoted.double.fidl
      begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.fidl}
      end: (")|(?<=^|[^\\])\s*(\n)
      endCaptures:
        '1': {name: punctuation.definition.string.end.fidl}
        '2': {name: invalid.illegal.unexpected-end-of-line.fidl}
      patterns:
      - include: '#lex-continuation'
      - include: '#string_escaped_char'
      - include: '#string_placeholder'
    - name: string.quoted.single.fidl
      begin: "'"
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.fidl}
      end: (')|(?<=^|[^\\])\s*(\n)
      endCaptures:
        '1': {name: punctuation.definition.string.end.fidl}
        '2': {name: invalid.illegal.unexpected-end-of-line.fidl}
      patterns:
      - include: '#lex-continuation'
      - include: '#string_escaped_char'
